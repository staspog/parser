import requests
from bs4 import BeautifulSoup
import csv
import time
import re
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
base_url = "https://books.toscrape.com/catalogue/page-{}.html"
main_site_url = "https://books.toscrape.com/"

print('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å')
pages = int(input())
print("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–Ω–∏–≥...")

# –û—Ç–∫—Ä—ã–≤–∞–µ–º CSV —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
with open('books.csv', 'w', newline='', encoding='utf-8') as file:
    fieldnames = ['Title', 'Price', 'Rating', 'UPC', 'Availability', 'Quantity']
    writer = csv.DictWriter(file, fieldnames=fieldnames)
    writer.writeheader()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
    for page in range(1, pages + 1):
        url = base_url.format(page)
        time.sleep(1)
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        books = soup.find_all('article', class_='product_pod')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
        for book in books:
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            title = book.h3.a['title']
            price_text = book.find('p', class_='price_color').get_text(strip=True)
            price = float(price_text.replace('√Ç¬£', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏
           # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏
            book_relative_url = book.h3.a['href']
            book_full_url = urljoin(response.url, book_relative_url)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            
            # DEBUG: –í—ã–≤–æ–¥–∏–º URL –∫–Ω–∏–≥–∏
            print(f"\nProcessing book: {title}")
            print(f"Book URL: {book_full_url}")
            
            # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏
            time.sleep(1)
            book_response = requests.get(book_full_url)
            
            # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            print(f"Response status: {book_response.status_code}")
            if book_response.status_code != 200:
                print(f"‚ö†Ô∏è Bad response! Content: {book_response.text[:200]}...")
                continue
                
            soup_book = BeautifulSoup(book_response.text, 'html.parser')
            
            # DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π HTML –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with open(f"debug_page_{page}.html", "w", encoding="utf-8") as f:
                f.write(soup_book.prettify())
            
            # –ü–∞—Ä—Å–∏–º UPC
            table = soup_book.find('table', class_='table table-striped')
            # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if not table:
                print(f"üö® Table not found in: {book_full_url}")
                print("HTML snippet:", str(soup_book.find('table'))[:100])
                upc = 'N/A'
            else:
                upc_th = table.find('th', text=lambda t: 'UPC' in str(t))
                upc = upc_th.find_next_sibling('td').text if upc_th else 'N/A'
            
            # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
            # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            availability = soup_book.find('p', class_='instock availability').text.strip()
            quantity = re.search(r'\d+', availability).group()
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Å—Ç–∞–µ—Ç—Å—è —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            rating_tag = book.find('p', class_='star-rating')
            rating_classes = rating_tag['class']
            rating = {'One': 1, 'Two': 2, 'Three': 3, 
                      'Four': 4, 'Five': 5}.get(rating_classes[1], 0)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            writer.writerow({
                'Title': title,
                'Price': price,
                'Rating': rating,
                'UPC': upc,
                'Availability': availability,
                'Quantity': quantity
            })
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª books.csv")
print("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")